// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: feedbackreq.proto

package feedbackreqpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//For api versioning
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CandidateName string `protobuf:"bytes,2,opt,name=candidate_name,json=candidateName,proto3" json:"candidate_name,omitempty"`
	RecruiterName string `protobuf:"bytes,3,opt,name=recruiter_name,json=recruiterName,proto3" json:"recruiter_name,omitempty"`
	//Full-Stack, Java, Dev-ops, UI-developer etc
	JobType                          string               `protobuf:"bytes,5,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	IsProxy                          bool                 `protobuf:"varint,6,opt,name=is_proxy,json=isProxy,proto3" json:"is_proxy,omitempty"`
	IsCodingRequired                 bool                 `protobuf:"varint,7,opt,name=is_coding_required,json=isCodingRequired,proto3" json:"is_coding_required,omitempty"`
	IsWhiteboardingRequired          bool                 `protobuf:"varint,8,opt,name=is_whiteboarding_required,json=isWhiteboardingRequired,proto3" json:"is_whiteboarding_required,omitempty"`
	IsIdRequired                     bool                 `protobuf:"varint,9,opt,name=is_id_required,json=isIdRequired,proto3" json:"is_id_required,omitempty"`
	IsCodeCompiled                   bool                 `protobuf:"varint,10,opt,name=is_code_compiled,json=isCodeCompiled,proto3" json:"is_code_compiled,omitempty"`
	IsAbleToWritePseudoCode          bool                 `protobuf:"varint,11,opt,name=is_able_to_write_pseudoCode,json=isAbleToWritePseudoCode,proto3" json:"is_able_to_write_pseudoCode,omitempty"`
	IsWhiteboardDone                 bool                 `protobuf:"varint,12,opt,name=is_whiteboard_done,json=isWhiteboardDone,proto3" json:"is_whiteboard_done,omitempty"`
	IsAlgoEfficient                  bool                 `protobuf:"varint,13,opt,name=is_algo_efficient,json=isAlgoEfficient,proto3" json:"is_algo_efficient,omitempty"`
	TechSkills                       []*TechSkill         `protobuf:"bytes,14,rep,name=tech_skills,json=techSkills,proto3" json:"tech_skills,omitempty"`
	MyComments                       string               `protobuf:"bytes,15,opt,name=my_comments,json=myComments,proto3" json:"my_comments,omitempty"`
	CreatDate                        *timestamp.Timestamp `protobuf:"bytes,16,opt,name=creatDate,proto3" json:"creatDate,omitempty"`
	UpdateDate                       *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	IsWhiteboardQuestionAsked        bool                 `protobuf:"varint,18,opt,name=is_whiteboard_question_asked,json=isWhiteboardQuestionAsked,proto3" json:"is_whiteboard_question_asked,omitempty"`
	WhiteboardExplained              bool                 `protobuf:"varint,19,opt,name=whiteboard_explained,json=whiteboardExplained,proto3" json:"whiteboard_explained,omitempty"`
	WhiteboardPartial                bool                 `protobuf:"varint,20,opt,name=whiteboard_partial,json=whiteboardPartial,proto3" json:"whiteboard_partial,omitempty"`
	AnyWhiteboardComment             string               `protobuf:"bytes,21,opt,name=any_whiteboard_comment,json=anyWhiteboardComment,proto3" json:"any_whiteboard_comment,omitempty"`
	AnyCodingComment                 string               `protobuf:"bytes,22,opt,name=any_coding_comment,json=anyCodingComment,proto3" json:"any_coding_comment,omitempty"`
	FollowedCodingStandards          bool                 `protobuf:"varint,23,opt,name=followed_coding_standards,json=followedCodingStandards,proto3" json:"followed_coding_standards,omitempty"`
	TotalYearExperience              int32                `protobuf:"varint,24,opt,name=total_year_experience,json=totalYearExperience,proto3" json:"total_year_experience,omitempty"`
	ToolsTechnologiesWorkedOn        string               `protobuf:"bytes,25,opt,name=tools_technologies_worked_on,json=toolsTechnologiesWorkedOn,proto3" json:"tools_technologies_worked_on,omitempty"`
	CurrentTechStackExperience       int32                `protobuf:"varint,26,opt,name=current_tech_stack_experience,json=currentTechStackExperience,proto3" json:"current_tech_stack_experience,omitempty"`
	CurrentToolsTechnologiesWorkedOn string               `protobuf:"bytes,27,opt,name=current_tools_technologies_worked_on,json=currentToolsTechnologiesWorkedOn,proto3" json:"current_tools_technologies_worked_on,omitempty"`
}

func (x *Feedback) Reset() {
	*x = Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feedback) ProtoMessage() {}

func (x *Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feedback.ProtoReflect.Descriptor instead.
func (*Feedback) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{0}
}

func (x *Feedback) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Feedback) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *Feedback) GetRecruiterName() string {
	if x != nil {
		return x.RecruiterName
	}
	return ""
}

func (x *Feedback) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *Feedback) GetIsProxy() bool {
	if x != nil {
		return x.IsProxy
	}
	return false
}

func (x *Feedback) GetIsCodingRequired() bool {
	if x != nil {
		return x.IsCodingRequired
	}
	return false
}

func (x *Feedback) GetIsWhiteboardingRequired() bool {
	if x != nil {
		return x.IsWhiteboardingRequired
	}
	return false
}

func (x *Feedback) GetIsIdRequired() bool {
	if x != nil {
		return x.IsIdRequired
	}
	return false
}

func (x *Feedback) GetIsCodeCompiled() bool {
	if x != nil {
		return x.IsCodeCompiled
	}
	return false
}

func (x *Feedback) GetIsAbleToWritePseudoCode() bool {
	if x != nil {
		return x.IsAbleToWritePseudoCode
	}
	return false
}

func (x *Feedback) GetIsWhiteboardDone() bool {
	if x != nil {
		return x.IsWhiteboardDone
	}
	return false
}

func (x *Feedback) GetIsAlgoEfficient() bool {
	if x != nil {
		return x.IsAlgoEfficient
	}
	return false
}

func (x *Feedback) GetTechSkills() []*TechSkill {
	if x != nil {
		return x.TechSkills
	}
	return nil
}

func (x *Feedback) GetMyComments() string {
	if x != nil {
		return x.MyComments
	}
	return ""
}

func (x *Feedback) GetCreatDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreatDate
	}
	return nil
}

func (x *Feedback) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Feedback) GetIsWhiteboardQuestionAsked() bool {
	if x != nil {
		return x.IsWhiteboardQuestionAsked
	}
	return false
}

func (x *Feedback) GetWhiteboardExplained() bool {
	if x != nil {
		return x.WhiteboardExplained
	}
	return false
}

func (x *Feedback) GetWhiteboardPartial() bool {
	if x != nil {
		return x.WhiteboardPartial
	}
	return false
}

func (x *Feedback) GetAnyWhiteboardComment() string {
	if x != nil {
		return x.AnyWhiteboardComment
	}
	return ""
}

func (x *Feedback) GetAnyCodingComment() string {
	if x != nil {
		return x.AnyCodingComment
	}
	return ""
}

func (x *Feedback) GetFollowedCodingStandards() bool {
	if x != nil {
		return x.FollowedCodingStandards
	}
	return false
}

func (x *Feedback) GetTotalYearExperience() int32 {
	if x != nil {
		return x.TotalYearExperience
	}
	return 0
}

func (x *Feedback) GetToolsTechnologiesWorkedOn() string {
	if x != nil {
		return x.ToolsTechnologiesWorkedOn
	}
	return ""
}

func (x *Feedback) GetCurrentTechStackExperience() int32 {
	if x != nil {
		return x.CurrentTechStackExperience
	}
	return 0
}

func (x *Feedback) GetCurrentToolsTechnologiesWorkedOn() string {
	if x != nil {
		return x.CurrentToolsTechnologiesWorkedOn
	}
	return ""
}

type TechSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillName            string   `protobuf:"bytes,1,opt,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	SkillRating          int32    `protobuf:"varint,2,opt,name=skill_rating,json=skillRating,proto3" json:"skill_rating,omitempty"`
	ExperienceRating     int32    `protobuf:"varint,3,opt,name=experience_rating,json=experienceRating,proto3" json:"experience_rating,omitempty"`
	Topics               []*Topic `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	IsHandsOn            bool     `protobuf:"varint,5,opt,name=is_hands_on,json=isHandsOn,proto3" json:"is_hands_on,omitempty"`
	InDepthUnderstanding bool     `protobuf:"varint,6,opt,name=in_depth_understanding,json=inDepthUnderstanding,proto3" json:"in_depth_understanding,omitempty"`
	//comma seprated topics/questions asked
	QuestionsAsked string `protobuf:"bytes,7,opt,name=questions_asked,json=questionsAsked,proto3" json:"questions_asked,omitempty"`
}

func (x *TechSkill) Reset() {
	*x = TechSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechSkill) ProtoMessage() {}

func (x *TechSkill) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechSkill.ProtoReflect.Descriptor instead.
func (*TechSkill) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{1}
}

func (x *TechSkill) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

func (x *TechSkill) GetSkillRating() int32 {
	if x != nil {
		return x.SkillRating
	}
	return 0
}

func (x *TechSkill) GetExperienceRating() int32 {
	if x != nil {
		return x.ExperienceRating
	}
	return 0
}

func (x *TechSkill) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TechSkill) GetIsHandsOn() bool {
	if x != nil {
		return x.IsHandsOn
	}
	return false
}

func (x *TechSkill) GetInDepthUnderstanding() bool {
	if x != nil {
		return x.InDepthUnderstanding
	}
	return false
}

func (x *TechSkill) GetQuestionsAsked() string {
	if x != nil {
		return x.QuestionsAsked
	}
	return ""
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName                 string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	IsScenarioCovered         bool   `protobuf:"varint,2,opt,name=is_scenario_covered,json=isScenarioCovered,proto3" json:"is_scenario_covered,omitempty"`
	WhatSceanrioQuestion      string `protobuf:"bytes,3,opt,name=what_sceanrio_question,json=whatSceanrioQuestion,proto3" json:"what_sceanrio_question,omitempty"`
	IsAbleToExplainScenario   bool   `protobuf:"varint,4,opt,name=is_able_to_explain_scenario,json=isAbleToExplainScenario,proto3" json:"is_able_to_explain_scenario,omitempty"`
	IsAbleToExaplain          bool   `protobuf:"varint,5,opt,name=is_able_to_exaplain,json=isAbleToExaplain,proto3" json:"is_able_to_exaplain,omitempty"`
	InDepthUnderstanding      bool   `protobuf:"varint,6,opt,name=in_depth_understanding,json=inDepthUnderstanding,proto3" json:"in_depth_understanding,omitempty"`
	PartiallyExplained        bool   `protobuf:"varint,7,opt,name=partially_explained,json=partiallyExplained,proto3" json:"partially_explained,omitempty"`
	IsHandsOn                 bool   `protobuf:"varint,8,opt,name=is_hands_on,json=isHandsOn,proto3" json:"is_hands_on,omitempty"`
	HaveTheroreticalKnowledge bool   `protobuf:"varint,9,opt,name=have_theroretical_knowledge,json=haveTheroreticalKnowledge,proto3" json:"have_theroretical_knowledge,omitempty"`
	// comma seprated topics/questions asked
	TheoryQuestion string `protobuf:"bytes,10,opt,name=theory_question,json=theoryQuestion,proto3" json:"theory_question,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{2}
}

func (x *Topic) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *Topic) GetIsScenarioCovered() bool {
	if x != nil {
		return x.IsScenarioCovered
	}
	return false
}

func (x *Topic) GetWhatSceanrioQuestion() string {
	if x != nil {
		return x.WhatSceanrioQuestion
	}
	return ""
}

func (x *Topic) GetIsAbleToExplainScenario() bool {
	if x != nil {
		return x.IsAbleToExplainScenario
	}
	return false
}

func (x *Topic) GetIsAbleToExaplain() bool {
	if x != nil {
		return x.IsAbleToExaplain
	}
	return false
}

func (x *Topic) GetInDepthUnderstanding() bool {
	if x != nil {
		return x.InDepthUnderstanding
	}
	return false
}

func (x *Topic) GetPartiallyExplained() bool {
	if x != nil {
		return x.PartiallyExplained
	}
	return false
}

func (x *Topic) GetIsHandsOn() bool {
	if x != nil {
		return x.IsHandsOn
	}
	return false
}

func (x *Topic) GetHaveTheroreticalKnowledge() bool {
	if x != nil {
		return x.HaveTheroreticalKnowledge
	}
	return false
}

func (x *Topic) GetTheoryQuestion() string {
	if x != nil {
		return x.TheoryQuestion
	}
	return ""
}

type FeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api         string    `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	FeedbackReq *Feedback `protobuf:"bytes,2,opt,name=feedback_req,json=feedbackReq,proto3" json:"feedback_req,omitempty"`
}

func (x *FeedbackRequest) Reset() {
	*x = FeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackRequest) ProtoMessage() {}

func (x *FeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackRequest.ProtoReflect.Descriptor instead.
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{3}
}

func (x *FeedbackRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *FeedbackRequest) GetFeedbackReq() *Feedback {
	if x != nil {
		return x.FeedbackReq
	}
	return nil
}

type FeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api        string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	//unique request id for created request
	FeedbackRes *Feedback `protobuf:"bytes,3,opt,name=feedback_res,json=feedbackRes,proto3" json:"feedback_res,omitempty"`
	RequestId   string    `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Message     string    `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FeedbackResponse) Reset() {
	*x = FeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackResponse) ProtoMessage() {}

func (x *FeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackResponse.ProtoReflect.Descriptor instead.
func (*FeedbackResponse) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{4}
}

func (x *FeedbackResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *FeedbackResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FeedbackResponse) GetFeedbackRes() *Feedback {
	if x != nil {
		return x.FeedbackRes
	}
	return nil
}

func (x *FeedbackResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FeedbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReadFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ReadFeedbackRequest) Reset() {
	*x = ReadFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFeedbackRequest) ProtoMessage() {}

func (x *ReadFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFeedbackRequest.ProtoReflect.Descriptor instead.
func (*ReadFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{5}
}

func (x *ReadFeedbackRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ReadFeedbackRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DeleteFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteFeedbackRequest) Reset() {
	*x = DeleteFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeedbackRequest) ProtoMessage() {}

func (x *DeleteFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeedbackRequest.ProtoReflect.Descriptor instead.
func (*DeleteFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFeedbackRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *DeleteFeedbackRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DeleteFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api        string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *DeleteFeedbackResponse) Reset() {
	*x = DeleteFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeedbackResponse) ProtoMessage() {}

func (x *DeleteFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeedbackResponse.ProtoReflect.Descriptor instead.
func (*DeleteFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFeedbackResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *DeleteFeedbackResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GenerateFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api         string    `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	FeedbackReq *Feedback `protobuf:"bytes,2,opt,name=feedback_req,json=feedbackReq,proto3" json:"feedback_req,omitempty"`
	SummaryNote string    `protobuf:"bytes,3,opt,name=summary_note,json=summaryNote,proto3" json:"summary_note,omitempty"`
}

func (x *GenerateFeedbackRequest) Reset() {
	*x = GenerateFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFeedbackRequest) ProtoMessage() {}

func (x *GenerateFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFeedbackRequest.ProtoReflect.Descriptor instead.
func (*GenerateFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateFeedbackRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GenerateFeedbackRequest) GetFeedbackReq() *Feedback {
	if x != nil {
		return x.FeedbackReq
	}
	return nil
}

func (x *GenerateFeedbackRequest) GetSummaryNote() string {
	if x != nil {
		return x.SummaryNote
	}
	return ""
}

type GeneratedFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api           string           `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	SkillFeedback []*SkillFeedback `protobuf:"bytes,2,rep,name=skill_feedback,json=skillFeedback,proto3" json:"skill_feedback,omitempty"`
	StatusCode    int32            `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string           `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	SummaryText   string           `protobuf:"bytes,5,opt,name=summary_text,json=summaryText,proto3" json:"summary_text,omitempty"`
}

func (x *GeneratedFeedbackResponse) Reset() {
	*x = GeneratedFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratedFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratedFeedbackResponse) ProtoMessage() {}

func (x *GeneratedFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratedFeedbackResponse.ProtoReflect.Descriptor instead.
func (*GeneratedFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{9}
}

func (x *GeneratedFeedbackResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GeneratedFeedbackResponse) GetSkillFeedback() []*SkillFeedback {
	if x != nil {
		return x.SkillFeedback
	}
	return nil
}

func (x *GeneratedFeedbackResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GeneratedFeedbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GeneratedFeedbackResponse) GetSummaryText() string {
	if x != nil {
		return x.SummaryText
	}
	return ""
}

type SkillFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackText string `protobuf:"bytes,1,opt,name=feedback_text,json=feedbackText,proto3" json:"feedback_text,omitempty"`
	Skill        string `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *SkillFeedback) Reset() {
	*x = SkillFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillFeedback) ProtoMessage() {}

func (x *SkillFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillFeedback.ProtoReflect.Descriptor instead.
func (*SkillFeedback) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{10}
}

func (x *SkillFeedback) GetFeedbackText() string {
	if x != nil {
		return x.FeedbackText
	}
	return ""
}

func (x *SkillFeedback) GetSkill() string {
	if x != nil {
		return x.Skill
	}
	return ""
}

type SimpleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	ReqText string `protobuf:"bytes,2,opt,name=req_text,json=reqText,proto3" json:"req_text,omitempty"`
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{11}
}

func (x *SimpleRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *SimpleRequest) GetReqText() string {
	if x != nil {
		return x.ReqText
	}
	return ""
}

type SimpleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api         string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	FeedbackRes string `protobuf:"bytes,2,opt,name=feedback_res,json=feedbackRes,proto3" json:"feedback_res,omitempty"`
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feedbackreq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feedbackreq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_feedbackreq_proto_rawDescGZIP(), []int{12}
}

func (x *SimpleResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *SimpleResponse) GetFeedbackRes() string {
	if x != nil {
		return x.FeedbackRes
	}
	return ""
}

var File_feedbackreq_proto protoreflect.FileDescriptor

var file_feedbackreq_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x41, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x0a, 0x74, 0x65, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x6b, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6e, 0x79, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a,
	0x24, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x9c, 0x02,
	0x0a, 0x09, 0x54, 0x65, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x6b, 0x65, 0x64, 0x22, 0xe9, 0x03, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x63,
	0x65, 0x61, 0x6e, 0x72, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x68, 0x61, 0x74, 0x53, 0x63, 0x65, 0x61, 0x6e,
	0x72, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x69,
	0x73, 0x5f, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x69, 0x73, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x61, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x45, 0x78, 0x61, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12,
	0x3e, 0x0a, 0x1b, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x72, 0x65, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x61, 0x76, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6f, 0x72,
	0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2f, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x22, 0xaf,
	0x01, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7f, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2f, 0x0a, 0x0c,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x38, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0d, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x3c, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x45, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x32, 0xf4, 0x02, 0x0a, 0x0f, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x12, 0x5a, 0x10, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x72,
	0x65, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feedbackreq_proto_rawDescOnce sync.Once
	file_feedbackreq_proto_rawDescData = file_feedbackreq_proto_rawDesc
)

func file_feedbackreq_proto_rawDescGZIP() []byte {
	file_feedbackreq_proto_rawDescOnce.Do(func() {
		file_feedbackreq_proto_rawDescData = protoimpl.X.CompressGZIP(file_feedbackreq_proto_rawDescData)
	})
	return file_feedbackreq_proto_rawDescData
}

var file_feedbackreq_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_feedbackreq_proto_goTypes = []interface{}{
	(*Feedback)(nil),                  // 0: v1.Feedback
	(*TechSkill)(nil),                 // 1: v1.TechSkill
	(*Topic)(nil),                     // 2: v1.Topic
	(*FeedbackRequest)(nil),           // 3: v1.FeedbackRequest
	(*FeedbackResponse)(nil),          // 4: v1.FeedbackResponse
	(*ReadFeedbackRequest)(nil),       // 5: v1.ReadFeedbackRequest
	(*DeleteFeedbackRequest)(nil),     // 6: v1.DeleteFeedbackRequest
	(*DeleteFeedbackResponse)(nil),    // 7: v1.DeleteFeedbackResponse
	(*GenerateFeedbackRequest)(nil),   // 8: v1.GenerateFeedbackRequest
	(*GeneratedFeedbackResponse)(nil), // 9: v1.GeneratedFeedbackResponse
	(*SkillFeedback)(nil),             // 10: v1.SkillFeedback
	(*SimpleRequest)(nil),             // 11: v1.SimpleRequest
	(*SimpleResponse)(nil),            // 12: v1.SimpleResponse
	(*timestamp.Timestamp)(nil),       // 13: google.protobuf.Timestamp
}
var file_feedbackreq_proto_depIdxs = []int32{
	1,  // 0: v1.Feedback.tech_skills:type_name -> v1.TechSkill
	13, // 1: v1.Feedback.creatDate:type_name -> google.protobuf.Timestamp
	13, // 2: v1.Feedback.updateDate:type_name -> google.protobuf.Timestamp
	2,  // 3: v1.TechSkill.topics:type_name -> v1.Topic
	0,  // 4: v1.FeedbackRequest.feedback_req:type_name -> v1.Feedback
	0,  // 5: v1.FeedbackResponse.feedback_res:type_name -> v1.Feedback
	0,  // 6: v1.GenerateFeedbackRequest.feedback_req:type_name -> v1.Feedback
	10, // 7: v1.GeneratedFeedbackResponse.skill_feedback:type_name -> v1.SkillFeedback
	3,  // 8: v1.FeedbackService.Create:input_type -> v1.FeedbackRequest
	5,  // 9: v1.FeedbackService.Read:input_type -> v1.ReadFeedbackRequest
	8,  // 10: v1.FeedbackService.GenerateFeedbackForRequest:input_type -> v1.GenerateFeedbackRequest
	6,  // 11: v1.FeedbackService.Delete:input_type -> v1.DeleteFeedbackRequest
	8,  // 12: v1.FeedbackService.GenerateFeedbackFromFormData:input_type -> v1.GenerateFeedbackRequest
	4,  // 13: v1.FeedbackService.Create:output_type -> v1.FeedbackResponse
	4,  // 14: v1.FeedbackService.Read:output_type -> v1.FeedbackResponse
	9,  // 15: v1.FeedbackService.GenerateFeedbackForRequest:output_type -> v1.GeneratedFeedbackResponse
	7,  // 16: v1.FeedbackService.Delete:output_type -> v1.DeleteFeedbackResponse
	9,  // 17: v1.FeedbackService.GenerateFeedbackFromFormData:output_type -> v1.GeneratedFeedbackResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_feedbackreq_proto_init() }
func file_feedbackreq_proto_init() {
	if File_feedbackreq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feedbackreq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratedFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feedbackreq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feedbackreq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feedbackreq_proto_goTypes,
		DependencyIndexes: file_feedbackreq_proto_depIdxs,
		MessageInfos:      file_feedbackreq_proto_msgTypes,
	}.Build()
	File_feedbackreq_proto = out.File
	file_feedbackreq_proto_rawDesc = nil
	file_feedbackreq_proto_goTypes = nil
	file_feedbackreq_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	Create(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	Read(ctx context.Context, in *ReadFeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	GenerateFeedbackForRequest(ctx context.Context, in *GenerateFeedbackRequest, opts ...grpc.CallOption) (*GeneratedFeedbackResponse, error)
	Delete(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackResponse, error)
	GenerateFeedbackFromFormData(ctx context.Context, in *GenerateFeedbackRequest, opts ...grpc.CallOption) (*GeneratedFeedbackResponse, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) Create(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, "/v1.FeedbackService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) Read(ctx context.Context, in *ReadFeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, "/v1.FeedbackService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GenerateFeedbackForRequest(ctx context.Context, in *GenerateFeedbackRequest, opts ...grpc.CallOption) (*GeneratedFeedbackResponse, error) {
	out := new(GeneratedFeedbackResponse)
	err := c.cc.Invoke(ctx, "/v1.FeedbackService/GenerateFeedbackForRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) Delete(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackResponse, error) {
	out := new(DeleteFeedbackResponse)
	err := c.cc.Invoke(ctx, "/v1.FeedbackService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GenerateFeedbackFromFormData(ctx context.Context, in *GenerateFeedbackRequest, opts ...grpc.CallOption) (*GeneratedFeedbackResponse, error) {
	out := new(GeneratedFeedbackResponse)
	err := c.cc.Invoke(ctx, "/v1.FeedbackService/GenerateFeedbackFromFormData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
type FeedbackServiceServer interface {
	Create(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	Read(context.Context, *ReadFeedbackRequest) (*FeedbackResponse, error)
	GenerateFeedbackForRequest(context.Context, *GenerateFeedbackRequest) (*GeneratedFeedbackResponse, error)
	Delete(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackResponse, error)
	GenerateFeedbackFromFormData(context.Context, *GenerateFeedbackRequest) (*GeneratedFeedbackResponse, error)
}

// UnimplementedFeedbackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeedbackServiceServer struct {
}

func (*UnimplementedFeedbackServiceServer) Create(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFeedbackServiceServer) Read(context.Context, *ReadFeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedFeedbackServiceServer) GenerateFeedbackForRequest(context.Context, *GenerateFeedbackRequest) (*GeneratedFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFeedbackForRequest not implemented")
}
func (*UnimplementedFeedbackServiceServer) Delete(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedFeedbackServiceServer) GenerateFeedbackFromFormData(context.Context, *GenerateFeedbackRequest) (*GeneratedFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFeedbackFromFormData not implemented")
}

func RegisterFeedbackServiceServer(s *grpc.Server, srv FeedbackServiceServer) {
	s.RegisterService(&_FeedbackService_serviceDesc, srv)
}

func _FeedbackService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeedbackService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Create(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeedbackService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Read(ctx, req.(*ReadFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GenerateFeedbackForRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GenerateFeedbackForRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeedbackService/GenerateFeedbackForRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GenerateFeedbackForRequest(ctx, req.(*GenerateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeedbackService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Delete(ctx, req.(*DeleteFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GenerateFeedbackFromFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GenerateFeedbackFromFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeedbackService/GenerateFeedbackFromFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GenerateFeedbackFromFormData(ctx, req.(*GenerateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FeedbackService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FeedbackService_Read_Handler,
		},
		{
			MethodName: "GenerateFeedbackForRequest",
			Handler:    _FeedbackService_GenerateFeedbackForRequest_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FeedbackService_Delete_Handler,
		},
		{
			MethodName: "GenerateFeedbackFromFormData",
			Handler:    _FeedbackService_GenerateFeedbackFromFormData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedbackreq.proto",
}
